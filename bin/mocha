#!/usr/bin/env node

'use strict';

/**
 * This tiny wrapper file checks for known node flags and appends them
 * when found, before invoking the "real" _mocha(1) executable.
 */

const {deprecate} = require('../lib/utils');
const {spawn} = require('child_process');
const {loadOptions} = require('../lib/cli/options');
const {isNodeFlag, impliesNoTimeouts} = require('../lib/cli/node-flags');
const unparse = require('yargs-unparser');
const debug = require('debug')('mocha:cli');
const mochaPath = require.resolve('./_mocha');
const childOpts = {};
const nodeOpts = {};
const {aliases} = require('../lib/cli/run-args');

const opts = loadOptions(process.argv.slice(2));
debug('loaded opts', opts);
Object.keys(opts).forEach(opt => {
  if (isNodeFlag(opt)) {
    nodeOpts[opt] = opts[opt];
    if (impliesNoTimeouts(opt)) {
      debug(`option "${opt}" disabled timeouts`);
      childOpts.timeout = false;
    }
  } else {
    childOpts[opt] = opts[opt];
  }
});

// allow --debug to invoke --inspect on Node.js v8 or newer
if (childOpts.debug) {
  nodeOpts.inspect = childOpts.debug;
  childOpts.timeout = false;
  delete childOpts.debug;
  debug('debug -> inspect');
}
if (childOpts['debug-brk']) {
  nodeOpts['inspect-brk'] = childOpts['debug-brk'];
  childOpts.timeout = false;
  delete childOpts['debug-brk'];
  debug('debug-brk -> inspect-brk');
}

// historical
if (nodeOpts.gc) {
  deprecate(
    '"-gc" is deprecated and will be removed from a future version of Mocha.  Use "--gc-global" instead.'
  );
  nodeOpts['gc-global'] = nodeOpts.gc;
  delete nodeOpts.gc;
}

const args = unparse(nodeOpts).concat(
  mochaPath,
  unparse(childOpts, {alias: aliases})
);
debug(`exec ${process.execPath} w/ args:`, args);

const proc = spawn(process.execPath, args, {
  stdio: 'inherit'
});
proc.on('exit', (code, signal) => {
  process.on('exit', () => {
    if (signal) {
      process.kill(process.pid, signal);
    } else {
      process.exit(code);
    }
  });
});

// terminate children.
process.on('SIGINT', () => {
  proc.kill('SIGINT'); // calls runner.abort()
  proc.kill('SIGTERM'); // if that didn't work, we're probably in an infinite loop, so make it die.
});
